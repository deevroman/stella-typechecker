import {Token} from "antlr4ts/Token";
import {StellaAuto, StellaType} from "./typecheckTypes";

export enum error_type {
    ERROR_MISSING_MAIN = "ERROR_MISSING_MAIN",
    ERROR_INCORRECT_ARITY_OF_MAIN = "ERROR_INCORRECT_ARITY_OF_MAIN",
    ERROR_UNDEFINED_VARIABLE = "ERROR_UNDEFINED_VARIABLE",

    ERROR_INCORRECT_NUMBER_OF_ARGUMENTS = "ERROR_INCORRECT_NUMBER_OF_ARGUMENTS",
    ERROR_UNEXPECTED_NUMBER_OF_PARAMETERS_IN_LAMBDA = "ERROR_UNEXPECTED_NUMBER_OF_PARAMETERS_IN_LAMBDA ",
    ERROR_NOT_A_FUNCTION = "ERROR_NOT_A_FUNCTION",
    ERROR_UNEXPECTED_TYPE_FOR_PARAMETER = "ERROR_UNEXPECTED_TYPE_FOR_PARAMETER",
    ERROR_UNEXPECTED_TYPE_FOR_EXPRESSION = "ERROR_UNEXPECTED_TYPE_FOR_EXPRESSION",

    ERROR_AMBIGUOUS_SUM_TYPE = "ERROR_AMBIGUOUS_SUM_TYPE",
    ERROR_UNEXPECTED_INJECTION = "ERROR_UNEXPECTED_INJECTION",

    ERROR_NOT_A_LIST = "ERROR_NOT_A_LIST",
    ERROR_UNEXPECTED_LIST = "ERROR_UNEXPECTED_LIST",
    ERROR_AMBIGUOUS_LIST_TYPE = "ERROR_AMBIGUOUS_LIST_TYPE",

    ERROR_AMBIGUOUS_PATTERN_TYPE = "ERROR_AMBIGUOUS_PATTERN_TYPE",
    ERROR_UNEXPECTED_PATTERN_FOR_TYPE = "ERROR_UNEXPECTED_PATTERN_FOR_TYPE",
    ERROR_ILLEGAL_EMPTY_MATCHING = "ERROR_ILLEGAL_EMPTY_MATCHING",
    ERROR_NONEXHAUSTIVE_MATCH_PATTERNS = "ERROR_NONEXHAUSTIVE_MATCH_PATTERNS",
    ERROR_DUPLICATE_PATTERN_VARIABLE = "ERROR_DUPLICATE_PATTERN_VARIABLE",
    ERROR_DUPLICATE_RECORD_PATTERN_FIELDS = "ERROR_DUPLICATE_RECORD_PATTERN_FIELDS",

    ERROR_TUPLE_INDEX_OUT_OF_BOUNDS = "ERROR_TUPLE_INDEX_OUT_OF_BOUNDS",
    ERROR_NOT_A_TUPLE = "ERROR_NOT_A_TUPLE",
    ERROR_UNEXPECTED_TUPLE = "ERROR_UNEXPECTED_TUPLE",
    ERROR_UNEXPECTED_TUPLE_LENGTH = "ERROR_UNEXPECTED_TUPLE_LENGTH",

    ERROR_UNEXPECTED_FIELD_ACCESS = "ERROR_UNEXPECTED_FIELD_ACCESS",
    ERROR_NOT_A_RECORD = "ERROR_NOT_A_RECORD",
    ERROR_DUPLICATE_RECORD_FIELDS = "ERROR_DUPLICATE_RECORD_FIELDS",
    ERROR_MISSING_RECORD_FIELDS = "ERROR_MISSING_RECORD_FIELDS",
    ERROR_UNEXPECTED_RECORD = "ERROR_UNEXPECTED_RECORD",
    ERROR_UNEXPECTED_RECORD_FIELDS = "ERROR_UNEXPECTED_RECORD_FIELDS",

    ERROR_MISSING_DATA_FOR_LABEL = "ERROR_MISSING_DATA_FOR_LABEL",
    ERROR_UNEXPECTED_DATA_FOR_NULLARY_LABEL = "ERROR_UNEXPECTED_DATA_FOR_NULLARY_LABEL",
    ERROR_UNEXPECTED_NON_NULLARY_VARIANT_PATTERN = "ERROR_UNEXPECTED_NON_NULLARY_VARIANT_PATTERN",
    ERROR_UNEXPECTED_NULLARY_VARIANT_PATTERN = "ERROR_UNEXPECTED_NULLARY_VARIANT_PATTERN",
    ERROR_AMBIGUOUS_VARIANT_TYPE = "ERROR_AMBIGUOUS_VARIANT_TYPE",
    ERROR_UNEXPECTED_VARIANT = "ERROR_UNEXPECTED_VARIANT",
    ERROR_UNEXPECTED_VARIANT_LABEL = "ERROR_UNEXPECTED_VARIANT_LABEL",
    ERROR_NOT_A_REFERENCE = "ERROR_NOT_A_REFERENCE",
    ERROR_UNEXPECTED_REFERENCE = "ERROR_UNEXPECTED_REFERENCE",
    ERROR_AMBIGUOUS_REFERENCE_TYPE = "ERROR_AMBIGUOUS_REFERENCE_TYPE",
    ERROR_UNEXPECTED_MEMORY_ADDRESS = "ERROR_UNEXPECTED_MEMORY_ADDRESS",

    ERROR_UNEXPECTED_SUBTYPE = "ERROR_UNEXPECTED_SUBTYPE",

    ERROR_EXCEPTION_TYPE_NOT_DECLARED = "ERROR_EXCEPTION_TYPE_NOT_DECLARED",
    ERROR_AMBIGUOUS_THROW_TYPE = "ERROR_AMBIGUOUS_THROW_TYPE",
    ERROR_AMBIGUOUS_PANIC_TYPE = "ERROR_AMBIGUOUS_PANIC_TYPE",

    ERROR_NOT_A_GENERIC_FUNCTION = "ERROR_NOT_A_GENERIC_FUNCTION",
    ERROR_INCORRECT_NUMBER_OF_TYPE_ARGUMENTS = "ERROR_INCORRECT_NUMBER_OF_TYPE_ARGUMENTS",
    ERROR_UNDEFINED_TYPE_VARIABLE = "ERROR_UNDEFINED_TYPE_VARIABLE",

    ERROR_OCCURS_CHECK_INFINITE_TYPE = "ERROR_OCCURS_CHECK_INFINITE_TYPE",
}

export class TypecheckError {
    type: error_type
    token: Token | undefined
    tokenString: string | undefined

    constructor(type: error_type, token: Token | undefined = undefined) {
        this.type = type;
        this.token = token;
        this.tokenString = token?.text;
        Error.captureStackTrace(this, this.constructor)
    }

    prettyPrint(): string {
        return ""
    }
}

export class ERROR_UNEXPECTED_TYPE_FOR_EXPRESSION extends TypecheckError {
    expected: StellaType
    actual: StellaType

    constructor(expected: StellaType, actual: StellaType, expr: any = undefined) {
        super(error_type.ERROR_UNEXPECTED_TYPE_FOR_EXPRESSION, undefined);
        this.expected = expected
        this.actual = actual
    }

    prettyPrint(): string {
        return `ожидается тип
  ${this.expected.prettyPrint()}
но получен тип
  ${this.actual.prettyPrint()}
`
    }
}
